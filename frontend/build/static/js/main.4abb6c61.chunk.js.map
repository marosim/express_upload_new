{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","upload","setUpload","useEffect","console","log","formData","FormData","append","document","getElementById","files","toJson","ls","querySelectorAll","l","getAttribute","value","JSON","stringify","fetch","method","body","then","response","json","data","catch","error","className","type","id","placeholder","onClick","e","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+NA8DeA,MA3Df,WAAgB,IAAD,EACeC,oBAAS,GADxB,mBACNC,EADM,KACEC,EADF,KA8Cb,OAvCAC,qBAAU,WACR,GAAIF,EAAQ,CACVC,GAAU,GACVE,QAAQC,IAAI,gBAEZ,IAAMC,EAAW,IAAIC,SACpBD,EAASE,OAAO,WAAYC,SAASC,eAAe,YAAYC,MAAM,IAQvE,IAbU,EAaNC,EAAS,GACTC,EAAKJ,SAASK,iBAAiB,WAdzB,cAgBMD,GAhBN,IAgBV,2BAAoB,CAAC,IAAVE,EAAS,QAClBH,EAAO,GAAD,OAAIG,EAAEC,aAAa,QAAWD,EAAEE,OAjB9B,8BAmBVb,QAAQC,IAAIO,GACZN,EAASE,OAAO,WAAYU,KAAKC,UAAUP,IAE3CQ,MAAM,UACJ,CACEC,OAAQ,OACRC,KAAMhB,IAEPiB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLtB,QAAQC,IAAI,SAAUqB,MAEvBC,OAAM,SAACC,GACNxB,QAAQC,IAAI,UAAWuB,SAI5B,CAAC3B,IAGF,sBAAK4B,UAAU,MAAf,UACE,uBAAOC,KAAK,OAAOD,UAAU,SAASE,GAAG,WAAWC,YAAY,SAChE,uBAAOF,KAAK,QAAQD,UAAU,SAASE,GAAG,YAAYC,YAAY,UAClE,uBAAOF,KAAK,OAAOD,UAAU,SAASE,GAAG,WAAWC,YAAY,SAChE,uBAAOF,KAAK,SAASD,UAAU,SAASE,GAAG,eAAeC,YAAY,aACtE,uBAAOF,KAAK,OAAOD,UAAU,SAASE,GAAG,cAAcC,YAAY,YACnE,uBAAOF,KAAK,OAAOC,GAAG,aACtB,wBAAQd,MAAM,UAAUgB,QAnDF,SAACC,GACzBhC,GAAU,IAkDR,wBC7CSiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASC,eAAe,SAM1ByB,M","file":"static/js/main.4abb6c61.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport './style.css';\r\n\r\nfunction App() {\r\n  const [upload, setUpload] = useState(false);\r\n\r\n  const handleClickUpload = (e) => {\r\n    setUpload(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (upload) {\r\n      setUpload(false);\r\n      console.log(\"start upload\");\r\n\r\n      const formData = new FormData();\r\n       formData.append('userfile', document.getElementById('userfile').files[0]);\r\n      // formData.append('username', document.getElementById('username').value);\r\n      // formData.append('useremail', document.getElementById('useremail').value);\r\n      // formData.append('useraddress', document.getElementById('useraddress').value);\r\n      // formData.append('usercity', document.getElementById('usercity').value);\r\n      // formData.append('userpostcode', document.getElementById('userpostcode').value);\r\n\r\n\r\n      let toJson = {};\r\n      let ls = document.querySelectorAll(\".toJson\");\r\n      \r\n      for (const l of ls) {\r\n        toJson[`${l.getAttribute('id')}`] = l.value;\r\n      }\r\n      console.log(toJson);\r\n      formData.append('userdata', JSON.stringify(toJson));\r\n      \r\n      fetch(`/upload`,\r\n        {\r\n          method: 'post',\r\n          body: formData\r\n        })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          console.log(\"data: \", data);\r\n        })\r\n        .catch((error) => {\r\n          console.log('error: ', error);\r\n        });\r\n\r\n    }\r\n  }, [upload])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <input type=\"text\" className=\"toJson\" id='username' placeholder=\"Name\"/>\r\n      <input type=\"email\" className=\"toJson\" id='useremail' placeholder=\"Email\" />\r\n      <input type=\"text\" className=\"toJson\" id='usercity' placeholder=\"City\"/>\r\n      <input type=\"number\" className=\"toJson\" id='userpostcode' placeholder=\"Postcode\" />\r\n      <input type=\"text\" className=\"toJson\" id='useraddress' placeholder=\"Address\"/>\r\n      <input type=\"file\" id='userfile' />\r\n      <button value='Upload!' onClick={handleClickUpload} >Upload</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}